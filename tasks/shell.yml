---
- name: "Shell: Install required system packages"
  ansible.builtin.package:
    name:
      - bash
      - fish
      - tmux
    state: present

- name: "Shell: Change user shell to `fish`"
  become: true
  ansible.builtin.user:
    name: "{{ ansible_user_id }}"
    shell: /usr/bin/fish

- name: "Shell: Get the current timestamp"
  ansible.builtin.command: date +%Y%m%d%H%M%S
  register: current_timestamp
  changed_when: false

- name: "Shell: Check if the original `.bashrc` file exists"
  ansible.builtin.stat:
    path: "{{ ansible_env.HOME }}/.bashrc"
  register: file_stat

- name: "Shell: Create backup if the original `.bashrc` exists"
  ansible.builtin.copy:
    src: "{{ ansible_env.HOME }}/.bashrc"
    dest: "{{ ansible_env.HOME }}/.bashrc.{{ current_timestamp.stdout }}.bak"
    mode: "0600"
  when: file_stat.stat.exists

- name: "Shell: List existing `.bashrc` backups"
  ansible.builtin.shell:
    cmd: |
      set -euo pipefail
      find {{ ansible_env.HOME }} -mindepth 1 -maxdepth 1 -name '.bashrc.*.bak' | tac
    executable: /usr/bin/bash
  register: backup_files
  when: file_stat.stat.exists
  changed_when: false

- name: "Shell: Remove old `.bashrc` backups if more than 3 exist"
  ansible.builtin.file:
    path: "{{ item }}"
    state: absent
  with_items: "{{ backup_files.stdout_lines[3:] }}"
  when: backup_files.stdout_lines | length > 3

- name: "Shell: Deploy `.bashrc` configuration"
  ansible.builtin.copy:
    src: "../files/.bashrc"
    dest: "{{ ansible_env.HOME }}/.bashrc"
    mode: preserve

- name: "Shell: Check if the original `.config/fish/` file exists"
  ansible.builtin.stat:
    path: "{{ ansible_env.HOME }}/.config/fish/"
  register: file_stat

- name: "Shell: Create backup if the original `.config/fish/` exists"
  ansible.builtin.copy:
    src: "{{ ansible_env.HOME }}/.config/fish/"
    dest: "{{ ansible_env.HOME }}/.config/fish.{{ current_timestamp.stdout }}.bak/"
    mode: "0600"
  when: file_stat.stat.exists

- name: "Shell: List existing `.config/fish/` backups"
  ansible.builtin.shell:
    cmd: |
      set -euo pipefail
      find {{ ansible_env.HOME }}/.config/ -mindepth 1 -maxdepth 1 -name 'fish.*.bak' | tac
    executable: /usr/bin/bash
  register: backup_files
  when: file_stat.stat.exists
  changed_when: false

- name: "Shell: Remove old `.config/fish/` backups if more than 3 exist"
  ansible.builtin.file:
    path: "{{ item }}"
    state: absent
  with_items: "{{ backup_files.stdout_lines[3:] }}"
  when:
    - backup_files.stdout_lines is defined
    - backup_files.stdout_lines | length > 3

- name: "Shell: Deploy `.config/fish/` configuration"
  ansible.builtin.copy:
    src: "../files/.config/fish/"
    dest: "{{ ansible_env.HOME }}/.config/fish"
    mode: preserve

- name: "Shell: Check if the original `.config/tmux/` file exists"
  ansible.builtin.stat:
    path: "{{ ansible_env.HOME }}/.config/tmux/"
  register: file_stat

- name: "Shell: Create backup if the original `.config/tmux/` exists"
  ansible.builtin.copy:
    src: "{{ ansible_env.HOME }}/.config/tmux/"
    dest: "{{ ansible_env.HOME }}/.config/tmux.{{ current_timestamp.stdout }}.bak/"
    mode: "0600"
  when: file_stat.stat.exists

- name: "Shell: List existing `.config/tmux/` backups"
  ansible.builtin.shell:
    cmd: |
      set -euo pipefail
      find {{ ansible_env.HOME }}/.config/ -mindepth 1 -maxdepth 1 -name 'tmux.*.bak' | tac
    executable: /usr/bin/bash
  register: backup_files
  when: file_stat.stat.exists
  changed_when: false

- name: "Shell: Remove old `.config/tmux/` backups if more than 3 exist"
  ansible.builtin.file:
    path: "{{ item }}"
    state: absent
  with_items: "{{ backup_files.stdout_lines[3:] }}"
  when:
    - backup_files.stdout_lines is defined
    - backup_files.stdout_lines | length > 3

- name: "Shell: Deploy `.config/tmux/` configuration"
  ansible.builtin.copy:
    src: "../files/.config/tmux/"
    dest: "{{ ansible_env.HOME }}/.config/tmux"
    mode: preserve

- name: "Shell: Check if the original `.environment` file exists"
  ansible.builtin.stat:
    path: "{{ ansible_env.HOME }}/.environment"
  register: file_stat

- name: "Shell: Create backup if the original `.environment` exists"
  ansible.builtin.copy:
    src: "{{ ansible_env.HOME }}/.environment"
    dest: "{{ ansible_env.HOME }}/.config/fish.{{ current_timestamp.stdout }}.bak/"
    mode: "0600"
  when: file_stat.stat.exists

- name: "Shell: List existing `.environment` backups"
  ansible.builtin.shell:
    cmd: |
      set -euo pipefail
      find {{ ansible_env.HOME }} -mindepth 1 -maxdepth 1 -name '.environment.*.bak' | tac
    executable: /usr/bin/bash
  register: backup_files
  when: file_stat.stat.exists
  changed_when: false

- name: "Shell: Remove old `.environment` backups if more than 3 exist"
  ansible.builtin.file:
    path: "{{ item }}"
    state: absent
  with_items: "{{ backup_files.stdout_lines[3:] }}"
  when:
    - backup_files.stdout_lines is defined
    - backup_files.stdout_lines | length > 3

- name: "Shell: Deploy `.environment` configuration"
  ansible.builtin.copy:
    src: "../files/.environment"
    dest: "{{ ansible_env.HOME }}/.environment"
    mode: preserve
